"""
An Input to bundle the information needed to create a person
"""
input CreatePersonInput {
    nameInfoInput: NameInfoInput!

    personRelationId: Long!

    created: Instant!
    updated: Instant!
}

"""
An Input to bundle the information needed to update a person
"""
input UpdatePersonInput {
    nameInfoInput: NameInfoInput!

    personRelationId: Long!

    updated: Instant!
}



"""
An Input to bundle the information needed to create a relation
"""
input CreatePersonRelationInput {
    name: String!

    color: String

    updated: Instant!
    created: Instant!
}



"""
An Input to bundle the information needed to update a relation
"""
input UpdatePersonRelationInput {
    name: String!

    color: String

    updated: Instant!
}

extend type Mutation {

    #
    # Authenticated
    #

    """
    Adds a person to the persons of the user
    """
    addPerson(personInput: CreatePersonInput!): Person!

    """
    Deletes a person from the user
    """
    deletePerson(id: UUID!): Person!

    """
    Updates the person of the user with the given id
    """
    updatePerson(id: UUID!, personInput: UpdatePersonInput!): Person!


    """
    Adds a relation to the relations of the user
    """
    addRelation(personRelationInput: CreatePersonRelationInput!): PersonRelation!

    """
    Deletes a relation from the user
    """
    deleteRelation(id: UUID!): PersonRelation!

    """
    Updates the relation of the user with the given id and data
    """
    updateRelation(id: UUID!, relationInput: UpdatePersonRelationInput): PersonRelation!

}

extend type Query {

    """
    Gets the person with the specified id, or null
    """
    getPersonById(id: UUID!): Person!

    """
    Gets all persons of the user, or empty
    """
    getAllPersons: [Person!]!


    """
    Gets the relation with the specified id, or null
    """
    getRelationById(id: UUID): PersonRelation!

    """
    Gets all relations of the user, or empty
    """
    getAllRelations: [PersonRelation!]!

}

"""
Stores information about a relation to a specific person
"""
type PersonRelation {
    id: UUID!

    name: String!
    color: String

    created: Instant!
    updated: Instant!
}

"""
Stores information about a person a user added
"""
type Person {
    id: UUID!

    nameInfo: NameInfo!
    relation: PersonRelation!

    created: Instant!
    updated: Instant!
}